package components

import (
	"encoding/json"
	"fmt"
	"shikakaQuelor/bootleg/internals/systembolaget"
	"shikakaQuelor/bootleg/internals/taxes"
	"strconv"
)

templ Products(products []taxes.Product, metadata systembolaget.Metadata) {
	for _, product := range products {
		<div
			class="text-base bg-neutral-50 bg-opacity-80 p-5 border-gray-50 border-solid border rounded-md flex gap-4 flex-wrap items-center justify-evenly mb-1"
		>
			if len(product.Images) > 0 {
				<img class="text-center max-h-36 order-1" src={ product.Images[0].ImageURL + "_200.png" } alt="NO IMAGE"/>
			} else {
				<div></div>
			}
			<div class="flex flex-col justify-items-start text-[0.8rem] m-0 order-3 w-full">
				<p>
					<b>{ product.ProductNameBold }</b>
				</p>
				<div class="flex justify-items-start flex-row text-[0.8rem] gap-x-1">
					<p>{ product.CategoryLevel1 }</p>
					<p>{ product.VolumeText }</p>
					<p>{ strconv.FormatFloat(product.AlcoholPercentage, 'f', -1, 64) }%</p>
					<p>Art.nr { product.ProductID }</p>
				</div>
				<button
					hx-post="/details"
					hx-vals={ fmt.Sprintf("%s", encode(product)) }
					hx-target="body"
					hx-swap="beforeend"
					hx-trigger="click"
					hx-ext="json-enc"
					class="self-start"
				>Mer info...</button>
			</div>
			<div class="grid grid-cols-[auto_auto] gap-x-5 order-4 w-full">
				<p>
					<b>Inköp</b>
				</p>
				<p>
					<b>{ strconv.FormatFloat(float64(product.OriginalPrice), 'f', 2, 64) } kr</b>
				</p>
				<p>Alkoholskatt</p>
				<p>{ strconv.FormatFloat(product.AlcoholTax, 'f', 2, 64) } kr</p>
				<p>Systembolagets påslag</p>
				<p>
					{ strconv.FormatFloat(float64(product.SystembolagetPercentageCut + product.SystembolagetUnitCut), 'f', 2, 64) } kr
				</p>
				<p>Moms</p>
				<p>{ strconv.FormatFloat(float64(product.Vat), 'f', 2, 64) } kr</p>
				<p>
					<b>Du betalar</b>
				</p>
				<p>
					<b>{ strconv.FormatFloat(float64(product.Price), 'f', 2, 64) } kr</b>
				</p>
			</div>
			<svg
				viewBox="0 0 36 36"
				class="w-auto h-36 origin-center order-2"
				style="transform: rotate3d(0, 0, 1, 110deg)"
				xmlns="http://www.w3.org/2000/svg"
			>
				<defs>
					<mask id={ product.ProductID }>
						<circle
							cx="18"
							cy="18"
							r="15"
							stroke="white"
							stroke-width="3.5"
							fill="none"
							stroke-dasharray={ strconv.FormatFloat((1-float64(product.OriginalPrice/product.Price))*320, 'f', 1, 64) + " 320" }
							pathLength="360"
						></circle>
					</mask>
					<mask id={ product.ProductID + "outer" }>
						<circle
							cx="18"
							cy="18"
							r="15"
							stroke="white"
							stroke-width="5"
							fill="none"
							stroke-dasharray="323 37"
							pathLength="360"
						></circle>
					</mask>
				</defs>
				<text x="18" y="20.35" class="font-sans text-[0.5rem] origin-center -rotate-[110deg]" style="text-anchor: middle;">
					{ strconv.FormatFloat((1 - float64(product.OriginalPrice / product.Price)) * 100, 'f', 1, 64) }%
				</text>
				<foreignObject x="0" y="0" width="36" height="36" mask={ fmt.Sprintf("url(#%vouter)", product.ProductID) }>
					<div class="bg-gray-400 w-full h-full"></div>
				</foreignObject>
				<foreignObject x="0" y="0" width="36" height="36" mask={ fmt.Sprintf("url(#%v)", product.ProductID) }>
					<div class="bg-cone-gradient w-full h-full"></div>
				</foreignObject>
			</svg>
		</div>
	}
	if metadata.NextPage > 0 {
		<div
			hx-post="/search"
			hx-vals={ fmt.Sprintf(`{"nextPage": "%d" , "search" : "%s" , "current" : "%v" }`,
  metadata.NextPage, metadata.Query, metadata.Total) }
			hx-target="this"
			hx-trigger="revealed"
			hx-swap="outerHTML"
			class="text-center text-gray-400"
		>
			{ fmt.Sprintf("Visar %v av %v möjliga produkter", metadata.Total,
  metadata.DocumentCount) }
		</div>
	} else if metadata.NextPage == -1 {
		<div class="text-center text-gray-400 ">
			{ fmt.Sprintf("Visar %v av %v möjliga produkter", metadata.Total,
  metadata.DocumentCount) }
		</div>
	}
}

func encode(product taxes.Product) string {
	p, err := json.Marshal(product)
	if err != nil {
		println("SOMETHING IS NOT GOOD HERE OMG")
		return ""
	}
	return string(p)
}
